buildscript {
    repositories {
        maven { url 'https://maven.minecraftforge.net' }
        maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }

    dependencies {
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

apply plugin: 'org.spongepowered.mixin'

def build_snapshot = System.getenv("BUILD_SNAPSHOT") == "true"
def build_id = System.getenv("BUILD_ID")

version = mc_version + "-" + mod_version

if (build_snapshot) {
    version += '-SNAPSHOT'
}

if (build_id != null) {
    version += "+build.${build_id}"
}

group = 'com.github.alexthe667' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//archivesBaseName = 'iceandfire'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                "iceandfire" {
                    source sourceSets.main
                }
            }
        }

        client {
            arg "-mixin.config=citadel.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            property 'forge.logging.markers', 'REGISTRYDUMP'


        }

        server {
            workingDirectory project.file('server')
            property 'mixin.env.disableRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=citadel.mixins.json"
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'


        }

        data {
            workingDirectory project.file('data')
            arg "-mixin.config=citadel.mixins.json"
            properties 'mixin.env.remapRefMap': 'true'
            property 'mixin.env.refMapRemappingFile', "${project.projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'iceandfire', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

        }
    }
}

mixin {
    add sourceSets.main, "iceandfire.refmap.json"
    config 'iceandfire.mixins.json'
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

repositories {
    flatDir { dirs 'dev' }
    maven { url = "https://www.cursemaven.com" } // CurseForge
    maven { url = "https://maven.blamejared.com/" } // JEI
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    // at runtime, use the full JEI jar
    implementation fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")
    //compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.25")
    //compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.25")
    //runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge-15.2.0.25")
    implementation fg.deobf("curse.maven:citadel-331936:4556677")

    // Debug
    implementation fg.deobf("curse.maven:atlasviewer-633577:4420382")
    implementation fg.deobf("curse.maven:mob-entity-path-visualizer-590716:4063117")

    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    manifest {
        attributes([
                "Specification-Title": "iceandfire",
                "Specification-Vendor": "alexthe667",
                "Specification-Version": mod_version, // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"alexthe667",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs" : "iceandfire.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file:///${project.projectDir}/mcmodsrepo"
//        }
//    }
//}
